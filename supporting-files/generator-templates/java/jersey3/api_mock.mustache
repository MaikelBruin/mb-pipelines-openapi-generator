{{>licenseInfo}}
package {{package}};

import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{invokerPackage}}.Pair;

{{#imports}}
    import {{import}};
{{/imports}}

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

{{#useBeanValidation}}
    import {{javaxPackage}}.validation.constraints.*;
    import {{javaxPackage}}.validation.Valid;

{{/useBeanValidation}}
{{#hasFormParamsInSpec}}
    import org.apache.http.HttpEntity;
    import org.apache.http.NameValuePair;
    import org.apache.http.entity.mime.MultipartEntityBuilder;
    import org.apache.http.message.BasicNameValuePair;
    import org.apache.http.client.entity.UrlEncodedFormEntity;

{{/hasFormParamsInSpec}}
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.*;
import lombok.Getter;
import lombok.SneakyThrows;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;

{{>generatedAnnotation}}

{{#operations}}
@Getter
public class {{classname}}MockProvider {

    private static {{classname}}ResponseExamples RESPONSE_EXAMPLES;
    private {{classname}}Client mock = Mockito.spy({{classname}}Client.class);

    @SneakyThrows
    public {{classname}}MockProvider({{classname}}ResponseExamples responseExamples) {
        {{classname}}MockProvider.RESPONSE_EXAMPLES = responseExamples;
        setDefaultMockConfigurations(this.mock, responseExamples);
    }

    public static void setDefaultMockConfigurations({{classname}}Client mock, {{classname}}ResponseExamples responseExamples) throws ApiException {
        var defaultHeaders = {{classname}}ResponseExamples.DEFAULT_HEADERS;
        reset(mock);
        {{#operation}}
        var {{operationId}}ApiResponse = new ApiResponse<{{^returnType}}Void{{/returnType}}>(200, defaultHeaders{{#returnType}}, responseExamples.{{operationId}}ResponseExample{{/returnType}});
        doReturn({{operationId}}ApiResponse).when(mock).{{operationId}}WithHttpInfo({{#allParams}} nullable({{#isArray}}{{containerTypeMapped}}{{/isArray}}{{^isArray}}{{{dataType}}}{{/isArray}}.class) {{^-last}}, {{/-last}}{{/allParams}});
        {{/operation}}
    }

    public static void setDefaultMockConfigurations({{classname}}Client mock) throws ApiException {
        setDefaultMockConfigurations(mock, RESPONSE_EXAMPLES);
    }
}
{{/operations}}
